From afd1e99785d44bddc699eac7d4bbadbaf47b8773 Mon Sep 17 00:00:00 2001
From: Angie Wang <Angie.Wang@windriver.com>
Date: Thu, 12 Jan 2017 15:35:30 -0500
Subject: [PATCH 13/91] US103891: Pike Rebase. HW Fault Handling: ceilometer
 ipmi sensor sample reporting

This squash includes the commits:

1. Rebase. Newton. Port  HW Fault Handling: ceilometer ipmi sensor sample reporting

   HW Fault Handling: ceilometer ipmi sensor sample reporting.
   This update modifies ipmitool to ignore the unknown sensor type instead of disabling the sensor group sample reporting.
   Submitted for: US64389

2. CGTS-7065: Parse IPMI sensor data failed, unknown sensor type requires more info

   This update dumps the sensor data dictionary when the ceilometer-polling
   detects unknown sensor type.
---
 ceilometer/ipmi/platform/ipmitool.py | 14 +++++++++-----
 1 file changed, 9 insertions(+), 5 deletions(-)

diff --git a/ceilometer/ipmi/platform/ipmitool.py b/ceilometer/ipmi/platform/ipmitool.py
index 7b04958..17d11c6 100644
--- a/ceilometer/ipmi/platform/ipmitool.py
+++ b/ceilometer/ipmi/platform/ipmitool.py
@@ -14,11 +14,13 @@
 
 """Utils to run ipmitool for data collection"""
 from oslo_concurrency import processutils
+from oslo_log import log
 
 from ceilometer.i18n import _
 from ceilometer.ipmi.platform import exception as ipmiexcept
 from ceilometer import utils
 
+LOG = log.getLogger(__name__)
 
 # Following 2 functions are copied from ironic project to handle ipmitool's
 # sensor data output. Need code clean and sharing in future.
@@ -31,13 +33,12 @@ def _get_sensor_type(sensor_data_dict):
 
     for key in ('Sensor Type (Analog)', 'Sensor Type (Discrete)',
                 'Sensor Type (Threshold)'):
-        try:
+        if key in sensor_data_dict.keys():
             return sensor_data_dict[key].split(' ', 1)[0]
-        except KeyError:
-            continue
 
-    raise ipmiexcept.IPMIException(_("parse IPMI sensor data failed,"
-                                     "unknown sensor type"))
+    LOG.error(_("parse ipmi sensor data failed, unknown sensor type "
+                "data: %(sensors_data)s"), {'sensors_data': sensor_data_dict})
+    return None
 
 
 def _process_sensor(sensor_data):
@@ -68,6 +69,9 @@ def _translate_output(output):
             continue
 
         sensor_type = _get_sensor_type(sensor_data_dict)
+        # ignore the sensors that have unknown types
+        if sensor_type is None:
+            continue
 
         # ignore the sensors which have no current 'Sensor Reading' data
         sensor_id = sensor_data_dict['Sensor ID']
-- 
2.7.4

